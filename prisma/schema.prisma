// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/c                                                li/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum JenisBarang {
  Barang
  Jasa
  Menu
  Paket
}

model User {
  username      String  @id @db.VarChar(50)
  password      String  @db.VarChar(200)
  refresh_token String? @db.Text
  contact_id    Int     @unique()

  contact Contact @relation(fields: [contact_id], references: [id])

  @@map("users")
}

model Contact {
  id        Int        @id @default(autoincrement())
  nama      String     @db.VarChar(200)
  alamat    String?    @db.VarChar(500)
  email     String?    @db.VarChar(500)
  no_hp     String?    @db.VarChar(20)
  user      User?
  supplier  Supplier?
  pelanggan Pelanggan?

  @@map("contacts")
}

model KategoriBarang {
  id           Int         @id @default(autoincrement())
  nama         String      @db.VarChar(200)
  jenis_barang JenisBarang @default(Barang)
  barangs      Barang[]

  @@map("kategori_barang")
}

model SubKategoriBarang {
  id           Int         @id @default(autoincrement())
  nama         String      @db.VarChar(200)
  jenis_barang JenisBarang @default(Barang)
  barangs      Barang[]

  @@map("sub_kategori_barang")
}

model SatuanBarang {
  id           Int         @id @default(autoincrement())
  nama         String      @db.VarChar(200)
  jenis_barang JenisBarang @default(Barang)

  barangs Barang[]
  gudangs DetailGudang[]

  @@map("satuan_barang")
}

model Rak {
  id   Int    @id @default(autoincrement())
  nama String @db.VarChar(200)

  @@map("rak")
}

model Barang {
  id             Int               @id() @default(autoincrement())
  nama           String            @db.VarChar(500)
  jenis_barang   JenisBarang       @default(Barang)
  satuan_id      Int
  satuan         SatuanBarang      @relation(fields: [satuan_id], references: [id])
  kategori_id    Int
  kategories     KategoriBarang    @relation(fields: [kategori_id], references: [id])
  subkategori_id Int
  subkategories  SubKategoriBarang @relation(fields: [subkategori_id], references: [id])

  hpp              Decimal   @default(0)
  harga_beli_akhir Decimal   @default(0)
  harga_beli_3     Decimal   @default(0)
  harga_jual_1     Decimal   @default(0)
  harga_jual_2     Decimal   @default(0)
  harga_jual_3     Decimal   @default(0)
  barcode          String    @unique() @db.VarChar(100)
  expired          DateTime? @default(now())
  diskon_rp        Decimal   @default(0)
  diskon_persen    Decimal   @default(0)
  jumlah_stok      Decimal   @default(0)
  jumlah_awal      Decimal   @default(0)
  keterangan       String    @db.Text
  is_active        Boolean   @default(true)

  gudangs DetailGudang[]

  @@map("barang")
}

model Supplier {
  contact_id        Int     @id()
  contact           Contact @relation(fields: [contact_id], references: [id])
  saldo_hutang      Decimal @default(0)
  max_hutang        Decimal @default(0)
  saldo_awal_hutang Decimal @default(0)
  jatuh_tempo       Decimal @default(0)

  @@map("suppliers")
}

model Gudang {
  id         Int     @id() @default(autoincrement())
  nama       String  @db.VarChar(500)
  alamat     String? @db.VarChar(500)
  keterangan String? @db.Text
  is_active  Boolean @default(true)

  barangs DetailGudang[]

  @@map("gudangs")
}

model DetailGudang {
  barang_id      Int
  gudang_id      Int
  satuan_id      Int
  jumlah         Decimal @default(0)
  jumlah_minimal Decimal @default(0)
  berat          Decimal @default(0)

  satuans SatuanBarang @relation(fields: [satuan_id], references: [id], onUpdate: Cascade)
  barangs Barang       @relation(fields: [barang_id], references: [id], onUpdate: Cascade)
  gudangs Gudang       @relation(fields: [gudang_id], references: [id], onUpdate: Cascade)

  @@id([barang_id, gudang_id, satuan_id])
  @@map("detail_gudangs")
}

model JenisPelanggan {
  id        Int     @id @default(autoincrement())
  nama      String  @unique() @db.VarChar(200)
  isDefault Boolean @default(false) @db.Boolean

  pelanggans Pelanggan[]

  @@map("jenis_pelanggans")
}

enum JenisPajak {
  None
  Inclusive
  Exclusive
}

model Pelanggan {
  contactId        Int        @id
  jenisPelangganId Int
  isCanCredit      Boolean    @default(false)
  saldoPiutang     Decimal    @default(0)
  maxPiutang       Decimal    @default(0)
  saldoAwalPiutang Decimal    @default(0)
  limitHariPiutang Int        @default(0)
  jatuhTempo       Int        @default(0)
  jenisPajak       JenisPajak @default(None)

  contact        Contact        @relation(fields: [contactId], references: [id], onUpdate: Cascade)
  jenisPelanggan JenisPelanggan @relation(fields: [jenisPelangganId], references: [id], onUpdate: Cascade)

  @@map("pelanggans")
}

enum TypeAkun {
  AkunKas
  NonKas
}

enum StatusArusKas {
  None
  KasOperasional
  KasInvestasi
  KasPendanaan
}

model Akun {
  kode          String        @id @db.Char(6)
  kodeAkunInduk String?       @db.Char(6)
  nama          String        @db.VarChar(200)
  levelAkun     Int
  saldoAwal     Decimal       @default(0)
  typeAkun      TypeAkun      @default(NonKas)
  statusArusKas StatusArusKas @default(None)
  isActive      Boolean       @default(true)

  akunInduk      Akun?  @relation("AkunAnakInduk", fields: [kodeAkunInduk], references: [kode])
  akunAnak       Akun[] @relation("AkunAnakInduk")
  kas            Kas[]  @relation("AkunKas")
  kasKartuKredit Kas[]  @relation("AkunKasKartuKredit")

  @@map("akuns")
}

model Kas {
  id                  Int     @id @default(autoincrement())
  kodeAkun            String  @db.Char(6)
  akun                Akun    @relation("AkunKas", fields: [kodeAkun], references: [kode])
  kodeAkunKartuKredit String? @db.Char(6)
  akunKartuKredit     Akun?   @relation("AkunKasKartuKredit", fields: [kodeAkunKartuKredit], references: [kode])
  nama                String  @db.VarChar(200)
  nomorRekening       String?  @db.VarChar(50)
  pemilik             String?  @db.VarChar(200)
  saldoKas            Decimal @default(0)
  keterangan          String?  @db.Text
  isActive            Boolean @default(true)
}
